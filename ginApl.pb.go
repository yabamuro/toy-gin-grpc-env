// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ginApl.proto

package ginApl

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type GrpcRequest struct {
	Query                string   `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GrpcRequest) Reset()         { *m = GrpcRequest{} }
func (m *GrpcRequest) String() string { return proto.CompactTextString(m) }
func (*GrpcRequest) ProtoMessage()    {}
func (*GrpcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ginApl_e25cf4c055b6598b, []int{0}
}
func (m *GrpcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrpcRequest.Unmarshal(m, b)
}
func (m *GrpcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrpcRequest.Marshal(b, m, deterministic)
}
func (dst *GrpcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrpcRequest.Merge(dst, src)
}
func (m *GrpcRequest) XXX_Size() int {
	return xxx_messageInfo_GrpcRequest.Size(m)
}
func (m *GrpcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GrpcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GrpcRequest proto.InternalMessageInfo

func (m *GrpcRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

// The response message containing the greetings
type GrpcResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GrpcResponse) Reset()         { *m = GrpcResponse{} }
func (m *GrpcResponse) String() string { return proto.CompactTextString(m) }
func (*GrpcResponse) ProtoMessage()    {}
func (*GrpcResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ginApl_e25cf4c055b6598b, []int{1}
}
func (m *GrpcResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrpcResponse.Unmarshal(m, b)
}
func (m *GrpcResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrpcResponse.Marshal(b, m, deterministic)
}
func (dst *GrpcResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrpcResponse.Merge(dst, src)
}
func (m *GrpcResponse) XXX_Size() int {
	return xxx_messageInfo_GrpcResponse.Size(m)
}
func (m *GrpcResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GrpcResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GrpcResponse proto.InternalMessageInfo

func (m *GrpcResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*GrpcRequest)(nil), "ginApl.GrpcRequest")
	proto.RegisterType((*GrpcResponse)(nil), "ginApl.GrpcResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Grpc service

type GrpcClient interface {
	// Sends a greeting
	Send(ctx context.Context, in *GrpcRequest, opts ...grpc.CallOption) (*GrpcResponse, error)
}

type grpcClient struct {
	cc *grpc.ClientConn
}

func NewGrpcClient(cc *grpc.ClientConn) GrpcClient {
	return &grpcClient{cc}
}

func (c *grpcClient) Send(ctx context.Context, in *GrpcRequest, opts ...grpc.CallOption) (*GrpcResponse, error) {
	out := new(GrpcResponse)
	err := grpc.Invoke(ctx, "/ginApl.Grpc/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Grpc service

type GrpcServer interface {
	// Sends a greeting
	Send(context.Context, *GrpcRequest) (*GrpcResponse, error)
}

func RegisterGrpcServer(s *grpc.Server, srv GrpcServer) {
	s.RegisterService(&_Grpc_serviceDesc, srv)
}

func _Grpc_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ginApl.Grpc/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).Send(ctx, req.(*GrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Grpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ginApl.Grpc",
	HandlerType: (*GrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Grpc_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ginApl.proto",
}

func init() { proto.RegisterFile("ginApl.proto", fileDescriptor_ginApl_e25cf4c055b6598b) }

var fileDescriptor_ginApl_e25cf4c055b6598b = []byte{
	// 136 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xcf, 0xcc, 0x73,
	0x2c, 0xc8, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0x94, 0xb9, 0xb8,
	0xdd, 0x8b, 0x0a, 0x92, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x44, 0xb8, 0x58, 0x0b,
	0x4b, 0x53, 0x8b, 0x2a, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x20, 0x1c, 0x25, 0x0d, 0x2e,
	0x1e, 0x88, 0xa2, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x09, 0x2e, 0xf6, 0xdc, 0xd4, 0xe2,
	0xe2, 0xc4, 0xf4, 0x54, 0xa8, 0x3a, 0x18, 0xd7, 0xc8, 0x9a, 0x8b, 0x05, 0xa4, 0x52, 0xc8, 0x98,
	0x8b, 0x25, 0x38, 0x35, 0x2f, 0x45, 0x48, 0x58, 0x0f, 0x6a, 0x2b, 0x92, 0x25, 0x52, 0x22, 0xa8,
	0x82, 0x10, 0x43, 0x95, 0x18, 0x92, 0xd8, 0xc0, 0x4e, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff,
	0xc6, 0xbf, 0x82, 0xf9, 0xaa, 0x00, 0x00, 0x00,
}
